REPORT ZDRIVER_EMAIL_TRIGGER.

DATA: lv_fm_name TYPE rs38l_fnam,
      ls_control_parameters TYPE  ssfctrlop,
      ls_output_options TYPE  ssfcompop,
      ls_job_output_info TYPE ssfcrescl,
      lv_otf TYPE xstring,
      lt_pdf_data TYPE solix_tab,
      lt_otf TYPE itcoo OCCURS 0 WITH HEADER LINE,
      lt_pdf_tab LIKE tline OCCURS 0 WITH HEADER LINE,
      lv_bin_filesize TYPE i.

*Internal table & Workarea declarations
DATA: lt_body       TYPE TABLE OF soli,
      lt_attachment TYPE TABLE OF solix,
      ls_attachment TYPE solix,
      ls_body       TYPE soli.

*Variable Declarations
DATA: lv_success TYPE flag,
      lv_msg TYPE string.

*Data References
DATA: lo_bcs        TYPE REF TO cl_bcs,
      lo_bcs_x      TYPE REF TO cx_send_req_bcs,
      lo_sender     TYPE REF TO cl_sapuser_bcs,
      lo_recipient  TYPE REF TO if_recipient_bcs,
      lo_address_x  TYPE REF TO cx_address_bcs,
      lo_document   TYPE REF TO cl_document_bcs,
      lo_document_x TYPE REF TO cx_document_bcs.

*Selection Screen
SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME.
PARAMETER: p_vbeln TYPE vbeln.
SELECTION-SCREEN END OF BLOCK b1.

START-OF-SELECTION.
  CALL FUNCTION 'SSF_FUNCTION_MODULE_NAME'
    EXPORTING
      formname           = 'ZEMAIL_TRIGGER1'
    IMPORTING
      fm_name            = lv_fm_name
    EXCEPTIONS
      no_form            = 1
      no_function_module = 2
      OTHERS             = 3.
  IF sy-subrc <> 0.
* Implement
  ENDIF.

  IF lv_fm_name IS NOT INITIAL.
    ls_control_parameters-preview = 'X'.
    ls_control_parameters-getotf = 'X'. " TO GET OTF DATA
    ls_control_parameters-no_dialog = 'X'.
    ls_output_options-tddest = 'LP01'.
    CALL FUNCTION lv_fm_name                "   '/1BCDWB/SF00000582'
     EXPORTING
       control_parameters          = ls_control_parameters
       output_options              = ls_output_options
       user_settings               = 'X'
       it_vbeln                    = p_vbeln
     IMPORTING
       job_output_info            =  ls_job_output_info
     EXCEPTIONS
       formatting_error           = 1
       internal_error             = 2
       send_error                 = 3
       user_canceled              = 4
       OTHERS                     = 5.
    IF sy-subrc <> 0.
    ENDIF.

    CALL FUNCTION 'CONVERT_OTF'
      EXPORTING
        format                = 'PDF'
      IMPORTING
        bin_filesize          = lv_bin_filesize
        bin_file              = lv_otf
      TABLES
        otf                   = ls_job_output_info-otfdata
        lines                 = lt_pdf_tab
      EXCEPTIONS
        err_max_linewidth     = 1
        err_format            = 2
        err_conv_not_possible = 3
        err_bad_otf           = 4
        OTHERS                = 5.
    IF sy-subrc <> 0.
*   Implement suitable error handling here
    ENDIF.
  ENDIF.

*Mail Functionality
*Converting Otf data to Pdf data
  IF lv_otf IS NOT INITIAL.
    CALL METHOD cl_document_bcs=>xstring_to_solix
      EXPORTING
        ip_xstring = lv_otf
      RECEIVING
        rt_solix   = lt_pdf_data.
  ENDIF.
  TRY.
***CREATE OBJECT
      lo_bcs = cl_bcs=>create_persistent( ).
***SENDER DETAILS
      lo_sender = cl_sapuser_bcs=>create( i_user = sy-uname ).
***SET SENDER
      lo_bcs->set_sender( i_sender = lo_sender ).
*RECIPIENT DETAILS
      lo_recipient = cl_cam_address_bcs=>create_internet_address( i_address_string = 'abc.com'  ).
      lo_bcs->add_recipient( EXPORTING i_recipient  = lo_recipient ).
*E-Mail Body
      ls_body-line = 'Hi,'.
      APPEND ls_body TO lt_body.
      ls_body-line = 'This is an auto generated E-Mail from SAP'.
      APPEND ls_body TO lt_body.
      ls_body-line = 'Kindly find the attached details of ------'.
      APPEND ls_body TO lt_body.
*Set E-Mail Body
      lo_document = cl_document_bcs=>create_document(
          i_type         = 'RAW'
          i_subject      = 'Confirmation Order'
          i_language     = sy-langu
          i_text         = lt_body ).
*Attachment
      lo_document->add_attachment(
        EXPORTING
          i_attachment_type     = 'BIN'    " Document Class for Attachment
          i_attachment_subject  = 'Confirmation Order.PDF'    " Attachment Title
          i_att_content_hex     = lt_pdf_data ).
*Set Document
      lo_bcs->set_document( i_document = lo_document ).
*Send an E-mail
      lo_bcs->send( EXPORTING i_with_error_screen = abap_true RECEIVING result = lv_success ).
      IF lv_success EQ abap_true.
        COMMIT WORK AND WAIT.
      ELSE.
      ENDIF.
***Exceptions
    CATCH cx_address_bcs INTO lo_address_x.      "SENDER/RECIPIENT DETAILS EXCEPTION
      lo_address_x->get_text( RECEIVING result = lv_msg ).
      MESSAGE lv_msg TYPE 'S' DISPLAY LIKE 'E'.
    CATCH cx_send_req_bcs INTO lo_bcs_x.         "CL_BCS EXCEPTION
      lo_bcs_x->get_text( RECEIVING result = lv_msg ).
      MESSAGE lv_msg TYPE 'S' DISPLAY LIKE 'E'.
    CATCH cx_document_bcs INTO lo_document_x.    "CL_DOCUMENT_BCS EXCEPTION
      lo_document_x->get_text( RECEIVING result = lv_msg ).
      MESSAGE lv_msg TYPE 'S' DISPLAY LIKE 'E'.
  ENDTRY.
